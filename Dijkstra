#include <limits.h>
#include<string.h>
#include <stdio.h>
#include <stdbool.h>
#define V 6

int minimumdist(int dist[], bool parent[])
{
    int min = INT_MAX, min_index,i;

    for(i = 0; i < V; i++)
    {
        if (parent[i] == false && dist[i] <= min)
        {
            min = dist[i];
            min_index = i;
        }
    }
    return min_index;
}

void print(int dist[])
{
    int i;
    printf("vertex \t \t distance from source\n");

    for (i = 0; i < V; i++)
    {
        printf("%d \t\t\t %d\n", i, dist[i]);
    }
}

void dijkstra(int graph[V][V], int start)
{
    int dist[V],i,count;
    bool parent[V];

    for (i = 0; i < V; i++)
    {
        dist[i] = INT_MAX;
        parent[i] = false;
    }

    dist[start] = 0;

    for (count = 0; count < V - 1; count++)
    {
        int u = minimumdist(dist, parent);
        parent[u] = true;

        for (i = 0; i < V; i++)
        {
            if (parent[i] == false && dist[u] != INT_MAX && graph[u][i] != 0 && dist[u] + graph[u][i] < dist[i])
            {
                dist[i] = dist[u] + graph[u][i];
            }
        }
    }
    print(dist);
}

int main()
{
    int graph[V][V] = 
{{0, 1, 4, 0, 0, 0}, { 1, 0, 4, 2, 7, 0 }, 
{ 4, 4, 0, 3, 5, 0 },{ 0, 2, 3, 0, 4, 6 }, 
{ 0, 7, 5, 4, 0, 7 }, { 0, 0, 0, 6, 7, 0 }};

    dijkstra(graph, 0);
    return 0;
}
